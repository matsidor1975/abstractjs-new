import { describe, expect, test } from "vitest"
import { parseErrorMessage } from "./parseErrorMessage"

const aa23RevertMessage = `Error: call revert exception [ See: https://links.ethers.org/v5-errors-CALL_EXCEPTION ] (method="simulateHandleOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),address,bytes)", data="0x65c8fd4d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000d4141323320726576657274656400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006408c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001a454950323631323a20696e76616c6964207369676e617475726500000000000000000000000000000000000000000000000000000000000000000000", errorArgs=[{"type":"BigNumber","hex":"0x00"},"AA23 reverted","0x08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001a454950323631323a20696e76616c6964207369676e6174757265000000000000"], errorName="FailedOpWithRevert", errorSignature="FailedOpWithRevert(uint256,string,bytes)", reason=null, code=CALL_EXCEPTION, version=abi/5.7.0)`
const revertExceptionMessage = `Error: call revert exception [ See: https://links.ethers.org/v5-errors-CALL_EXCEPTION ] (method="simulateHandleOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),address,bytes)", data="0x220266b600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001b4141313320696e6974436f6465206661696c6564206f72204f4f470000000000", errorArgs=[{"type":"BigNumber","hex":"0x00"},"AA13 initCode failed or OOG"], errorName="FailedOp", errorSignature="FailedOp(uint256,string)", reason=null, code=CALL_EXCEPTION, version=abi/5.7.0)`
const revertExceptionMessageTwo = `Error: 10 - Error: cannot estimate gas; transaction may fail or may require manual gas limit [ See: https://links.ethers.org/v5-errors-UNPREDICTABLE_GAS_LIMIT ] (error={"reason":"execution reverted","code":"UNPREDICTABLE_GAS_LIMIT","method":"estimateGas","transaction":{"from":"0x4b19129EA58431A06D01054f69AcAe5de50633b6","maxPriorityFeePerGas":{"type":"BigNumber","hex":"0x027f"},"maxFeePerGas":{"type":"BigNumber","hex":"0x05fd"},"to":"0xE854C84cD68fC434cB3B0042c29235D452cAD977","value":{"type":"BigNumber","hex":"0x2386f26fc10000"},"data":"0x57956b580000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001ad3329282bd1c0e1a567f56b01e3ff0cbb973114905fa00fbcbf8314de6da57ea2bc4710115f5271041ca50000000000000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000249f00000000000000000000000000007a120000000000000000000000000000000000000000000000000000000000000b7b800000000000000000000000000000540000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c4e9ae5c530100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000006423b872dd0000000000000000000000003079b249dfde4692d7844aa261f8cf7d927a0da50000000000000000000000001ad3329282bd1c0e1a567f56b01e3ff0cbb9731100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000074e854c84cd68fc434cb3b0042c29235d452cad977000000000000000000000000000186a0000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000858d8000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff0102f8ce0a81b7830f4240830f4566828d01940b2c639c533813f4aa9d7837caf62653d097ff8580b864095ea7b30000000000000000000000003079b249dfde4692d7844aa261f8cf7d927a0da500000000000000000000000000000000000000000000000000000000000000073db2f3ea20a7dce7a0ade7849f43d78fa011f6dd999ac222ebc38e467be7c90dc080a01f326b73254d4e91c496a1b58d8a1da689268013d92ab9a062a921a52ff8df04a04fd18b4f62ecb2fc3330200e2f2757c9d4d230cf7cb9a2e8ef2b28574def87aaeeb2d8fc862138c20d4828dd5968e834d27189ce06f43e6b832c8ef26cb62f2a01000067a3a7cf000067a3a8fb00","type":2,"accessList":null},"error":{"reason":"processing response error","code":"SERVER_ERROR","body":"{\"jsonrpc\":\"2.0\",\"id\":614,\"error\":{\"code\":-32000,\"message\":\"execution reverted\"}}\n","error":{"code":-32000},"requestBody":"{\"method\":\"eth_estimateGas\",\"params\":[{\"type\":\"0x2\",\"maxFeePerGas\":\"0x5fd\",\"maxPriorityFeePerGas\":\"0x27f\",\"value\":\"0x2386f26fc10000\",\"from\":\"0x4b19129ea58431a06d01054f69acae5de50633b6\",\"to\":\"0xe854c84cd68fc434cb3b0042c29235d452cad977\",\"data\":\"0x57956b580000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001ad3329282bd1c0e1a567f56b01e3ff0cbb973114905fa00fbcbf8314de6da57ea2bc4710115f5271041ca50000000000000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000249f00000000000000000000000000007a120000000000000000000000000000000000000000000000000000000000000b7b800000000000000000000000000000540000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c4e9ae5c530100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff8500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000006423b872dd0000000000000000000000003079b249dfde4692d7844aa261f8cf7d927a0da50000000000000000000000001ad3329282bd1c0e1a567f56b01e3ff0cbb9731100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000074e854c84cd68fc434cb3b0042c29235d452cad977000000000000000000000000000186a0000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000858d8000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff0102f8ce0a81b7830f4240830f4566828d01940b2c639c533813f4aa9d7837caf62653d097ff8580b864095ea7b30000000000000000000000003079b249dfde4692d7844aa261f8cf7d927a0da500000000000000000000000000000000000000000000000000000000000000073db2f3ea20a7dce7a0ade7849f43d78fa011f6dd999ac222ebc38e467be7c90dc080a01f326b73254d4e91c496a1b58d8a1da689268013d92ab9a062a921a52ff8df04a04fd18b4f62ecb2fc3330200e2f2757c9d4d230cf7cb9a2e8ef2b28574def87aaeeb2d8fc862138c20d4828dd5968e834d27189ce06f43e6b832c8ef26cb62f2a01000067a3a7cf000067a3a8fb00","to":{},"nonce":1279,"maxFeePerGas":{"type":"BigNumber","hex":"0x05fd"},"maxPriorityFeePerGas":{"type":"BigNumber","hex":"0x027f"},"from":"0x4b19129EA58431A06D01054f69AcAe5de50633b6","type":2,"value":{"type":"BigNumber","hex":"0x2386f26fc10000"},"gasLimit":{},"chainId":{}}, code=UNPREDICTABLE_GAS_LIMIT, version=abstract-signer/5.7.0)`
const revertExceptionMessageThree = `cannot estimate gas; transaction may fail or may require manual gas limit [ See: https://links.ethers.org/v5-errors-UNPREDICTABLE_GAS_LIMIT ] (error={"reason":"execution reverted","code":"UNPREDICTABLE_GAS_LIMIT","method":"estimateGas","transaction":{"from":"0x4b19129EA58431A06D01054f69AcAe5de50633b6","maxPriorityFeePerGas":{"type":"BigNumber","hex":"0x02ac"},"maxFeePerGas":{"type":"BigNumber","hex":"0x0669"},"to":"0xE854C84cD68fC434cB3B0042c29235D452cAD977","value":{"type":"BigNumber","hex":"0x2386f26fc10000"},"data":"0x57956b5800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000e185cba7dde585c180737d7e10705a17d5a93df8a849f00fbcbf8314de6da57ea2bc4710115f5271041ca50000000000000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000249f000000000000000000000000000014c08000000000000000000000000000000000000000000000000000000000000b44c00000000000000000000000000000556000000000000000000000000000002ab0000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104e9ae5c530000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000980b2c639c533813f4aa9d7837caf62653d097ff85000000000000000000000000000000000000000000000000000000000000000023b872dd0000000000000000000000003079b249dfde4692d7844aa261f8cf7d927a0da50000000000000000000000004b19129ea58431a06d01054f69acae5de50633b600000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000074e854c84cd68fc434cb3b0042c29235d452cad977000000000000000000000000000186a0000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000020054000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000002610200000000000000000000000000000000000000000000000000000000000000200000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000000e185cba7dde585c180737d7e10705a17d5a93df6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c926d9c34bb1a1c312f69c53b2d93b8be20faafba63af2438c6811713c9b1f933f0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000ec000000000000000000000000000000000000000000000000000000000000000174a3b6b8f15bc9fcd11ed6a2dd4c9be938a7d7413d65d3ceba18b2f4ed73222100000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067a3b9bc000000000000000000000000000000000000000000000000000000000000001b3c1eaa3bfdd02cb461d813635b2c142aa33b7773ba05e876402f52d9827d5b927e5096facbce7d6de55caa0ae22b60061f67410261b2b9d71703b9a22a2492290000000000000000000000000000000000000000000000000000000000000002107f4463f9753231c6f7bdc8b9590c35b93d7e2a16fbd68961df0cba0a94b8d0c6a38943adabf567bacdfaf620228f8bac65e061c65bf087296b6993402469b200000000000000000000000000000000000000000000000000000000000000000000000000000000000000f864cdaeb9b998d8a1d85c17ed7ab643c64f4cb18a844d00fbcbf8314de6da57ea2bc4710115f5271041ca50000000000000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000249f000000000000000000000000000014c08000000000000000000000000000000000000000000000000000000000000b2d800000000000000000000000000000556000000000000000000000000000002ab00000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e4e9ae5c530000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000780b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000000000000000000000000000000000000000000000a9059cbb0000000000000000000000004b19129ea58431a06d01054f69acae5de50633b600000000000000000000000000000000000000000000000000000000000026d10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000074e854c84cd68fc434cb3b0042c29235d452cad977000000000000000000000000000186a0000000000000000000000000000186a0000000000000000000000000000000000000000000000000000000000001fee0000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000161001ff2ab7fc7fb40e0359451bf2cee57501f03549c07acf18d4c2b6aa4f7ac5ff900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067a3b9bd00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000001e786771051e3f05dbc960b1d8cdd9a8b0ed7e8663e665d1a0fa13adcba5d008a00000000000000000000000000000000000000000000000000000000000000419bba47d65d4f2204da9190d06efb95e45e04aac390306d43f133960f0560f6054821eaf81599770a3ea299f9e55795458eae404eda851ff3d8df8e4ede326cfd1c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","to":{},"nonce":1362,"maxFeePerGas":{"type":"BigNumber","hex":"0x0669"},"maxPriorityFeePerGas":{"type":"BigNumber","hex":"0x02ac"},"from":"0x4b19129EA58431A06D01054f69AcAe5de50633b6","type":2,"value":{"type":"BigNumber","hex":"0x2386f26fc10000"},"gasLimit":{},"chainId":{}}, code=UNPREDICTABLE_GAS_LIMIT, version=abstract-signer/5.7.0)`
const anotherRevertMessage = `call revert exception [ See: https://links.ethers.org/v5-errors-CALL_EXCEPTION ] (method="simulateHandleOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),address,bytes)", data="0x65c8fd4d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000d41413233207265766572746564000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", errorArgs=[{"type":"BigNumber","hex":"0x00"},"AA23 reverted","0x"], errorName="FailedOpWithRevert", errorSignature="FailedOpWithRevert(uint256,string,bytes)", reason=null, code=CALL_EXCEPTION, version=abi/5.8.0)`

describe("utils.parseErrorMessage", () => {
  test("should always grab the important aa error", async () => {
    const err = {
      errors: [anotherRevertMessage]
    }

    const result = parseErrorMessage(err)
    expect(result).toBe("AA23 reverted")
  })

  test("should parse bad gateway error", () => {
    const error = { json: { error: "Bad Gateway" } }
    const result = parseErrorMessage(error)
    expect(result).toBe(String(error))
  })

  test("should parse aa23 error message", () => {
    const error = { errors: [aa23RevertMessage] }

    expect(parseErrorMessage(error).toString()).toBe("AA23 reverted")
  })

  test("should return the correct parsedError message for revertExceptionMessageThree", () => {
    const error = new Error(revertExceptionMessageThree)
    expect(parseErrorMessage(error)).toBe("UNPREDICTABLE_GAS_LIMIT")
  })

  test("should return the correct parsedError message", () => {
    const error = new Error(revertExceptionMessageTwo)
    expect(parseErrorMessage(error)).toBe("UNPREDICTABLE_GAS_LIMIT")
  })

  test("should return the relevant part from an entrypoint error", () => {
    const error = new Error(revertExceptionMessage)
    expect(parseErrorMessage(error)).toBe("AA13 initCode failed or OOG")
    expect(error.message).toBe("AA13 initCode failed or OOG")
  })

  test("should return the error message if it doesn't match the entrypoint error pattern", () => {
    const error = { errors: [revertExceptionMessage] }
    expect(parseErrorMessage(error)).toBe("AA13 initCode failed or OOG")
  })

  test("should return the error message if it doesn't match the entrypoint error pattern", () => {
    const error = new Error("test")
    expect(parseErrorMessage(error)).toBe("test")
    expect(parseErrorMessage("test")).toBe("test")
  })

  test("should provide human readable error message", () => {
    const error = {
      errors: [
        {
          type: "field",
          msg: "Invalid value",
          path: "userOps",
          location: "body"
        },
        {
          type: "field",
          msg: "Invalid value",
          path: "paymentInfo.sender",
          location: "body"
        },
        {
          type: "field",
          msg: "Invalid value",
          path: "paymentInfo.sender",
          location: "body"
        },
        {
          type: "field",
          msg: "Invalid value",
          path: "paymentInfo.eoa",
          location: "body"
        },
        {
          type: "field",
          msg: "Invalid value",
          path: "paymentInfo.eoa",
          location: "body"
        },
        {
          type: "field",
          msg: "Invalid value",
          path: "paymentInfo.nonce",
          location: "body"
        },
        {
          type: "field",
          msg: "Invalid value",
          path: "paymentInfo.nonce",
          location: "body"
        },
        {
          type: "field",
          msg: "Invalid value",
          path: "paymentInfo.token",
          location: "body"
        },
        {
          type: "field",
          msg: "Invalid value",
          path: "paymentInfo.token",
          location: "body"
        },
        {
          type: "field",
          msg: "Cannot read properties of undefined (reading 'chainId')",
          path: "paymentInfo.token",
          location: "body"
        },
        {
          type: "field",
          msg: "Invalid value",
          path: "paymentInfo.chainId",
          location: "body"
        },
        {
          type: "field",
          msg: "Invalid value",
          path: "paymentInfo.chainId",
          location: "body"
        },
        {
          type: "field",
          msg: "Invalid value",
          path: "paymentInfo.chainId",
          location: "body"
        },
        {
          type: "field",
          msg: "Unsupported chain.",
          path: "paymentInfo.chainId",
          location: "body"
        },
        {
          type: "field",
          msg: "Cannot read properties of undefined (reading 'map')",
          path: "paymentInfo.chainId",
          location: "body"
        }
      ]
    }
    expect(parseErrorMessage(error)).toBe(
      error.errors.map(({ msg, path }) => `${path}: ${msg}`).join("\n")
    )
  })

  test("should handle errors array", () => {
    const error = { errors: ["First error", "Second error"] }
    expect(parseErrorMessage(error)).toBe("First error")
  })

  test("should handle message field", () => {
    const error = { message: "Error message" }
    expect(parseErrorMessage(error)).toBe("Error message")
  })

  test("should handle statusText field", () => {
    const error = { statusText: "Not Found" }
    expect(parseErrorMessage(error)).toBe("Not Found")
  })

  test("should handle across rate limiting error", () => {
    const error = {
      type: "AcrossApiError",
      code: "AMOUNT_TOO_LOW",
      status: 400,
      message: "Sent amount is too low relative to fees"
    }
    expect(parseErrorMessage(error)).toBe(
      "AcrossApiError: Sent amount is too low relative to fees"
    )
  })

  test("should handle nested error object", () => {
    const error = {
      json: {
        errors: ["JSON error"]
      }
    }
    expect(parseErrorMessage(error)).toBe(String(error))
  })

  test("should clean up common error prefixes", () => {
    expect(parseErrorMessage("Error: Something went wrong")).toBe(
      "Something went wrong"
    )
    expect(parseErrorMessage("Details: Problem occurred")).toBe(
      "Problem occurred"
    )
    expect(parseErrorMessage("Message: Invalid input")).toBe("Invalid input")
    expect(parseErrorMessage("error")).toBe("")
  })
})
